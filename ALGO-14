#include<iostream>
using namespace std;
#include<algorithm> 
int n,new_number[500],len;
string m;
int fun(int s[]){
	for(int i=0;i<len/2;i++){
		if(s[i]!=s[len-i-1]){
			return 0;
		}
	}
	return 1;
}
void atoiString(string s){
	for(int i=0;i<s.size();i++){
		if(isdigit(s[i])){
			new_number[i]=s[i]-'0';
		}else{
			new_number[i]=s[i]-55;
		}
	}
}
void BigNumberAdd(int s[]){//大数相加用数组 
	int temp[500];
	for(int i=len-1,j=0;i>=0;i--,j++){
		temp[j]=s[i];
	}
	int t=0;
	for(int i=0;i<len;i++){
		int num=t+temp[i]+s[i];//相加 
		new_number[i]=num%n;//进制数 
		t=num/n;//进位 
	}
	while(t){
		new_number[len++]=t%n;//t大于进制 当前数的长度+1 
		t=t/n;
	}
}
int main(){
	cin>>n>>m;
	len=m.size();
	atoiString(m);
	int step=0;
	while(1){
		if(fun(new_number)){
			printf("STEP=%d\n",step);
			return 0;
		}
		BigNumberAdd(new_number);
		if(step++==30){
			cout<<"Impossible!"<<endl;
			return 0;
		}
	} 
	return 0;
}
